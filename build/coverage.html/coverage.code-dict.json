{"/home/travis/build/npmtest/node-npmtest-hyperdrive/test.js":"/* istanbul instrument in package npmtest_hyperdrive */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hyperdrive/lib.npmtest_hyperdrive.js":"/* istanbul instrument in package npmtest_hyperdrive */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hyperdrive = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hyperdrive = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hyperdrive/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hyperdrive && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hyperdrive */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hyperdrive\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hyperdrive.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_hyperdrive.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hyperdrive.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_hyperdrive.__dirname + '/lib.npmtest_hyperdrive.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hyperdrive/node_modules/hyperdrive/index.js":"var hypercore = require('hypercore')\nvar mutexify = require('mutexify')\nvar raf = require('random-access-file')\nvar thunky = require('thunky')\nvar tree = require('append-tree')\nvar collect = require('stream-collector')\nvar sodium = require('sodium-native')\nvar inherits = require('inherits')\nvar events = require('events')\nvar duplexify = require('duplexify')\nvar from = require('from2')\nvar messages = require('./lib/messages')\nvar stat = require('./lib/stat')\n\nvar DEFAULT_FMODE = (4 | 2 | 0) << 6 | ((4 | 0 | 0) << 3) | (4 | 0 | 0) // rw-r--r--\nvar DEFAULT_DMODE = (4 | 2 | 1) << 6 | ((4 | 0 | 1) << 3) | (4 | 0 | 1) // rwxr-xr-x\n\nmodule.exports = Hyperdrive\n\nfunction Hyperdrive (storage, key, opts) {\n  if (!(this instanceof Hyperdrive)) return new Hyperdrive(storage, key, opts)\n  events.EventEmitter.call(this)\n\n  if (isObject(key)) {\n    opts = key\n    key = null\n  }\n\n  if (!opts) opts = {}\n\n  this.key = null\n  this.discoveryKey = null\n  this.live = true\n\n  this._storages = defaultStorage(this, storage, opts)\n\n  // TODO: forward errors\n  this.metadata = opts.metadata || hypercore(this._storages.metadata, key, {secretKey: opts.secretKey})\n  this.content = opts.content || null\n  this.maxRequests = opts.maxRequests || 16\n  this.readable = true\n\n  this.storage = storage // TODO: do something smarter (this is polymorphic)\n  this.tree = tree(this.metadata, {offset: 1, valueEncoding: messages.Stat})\n  if (typeof opts.version === 'number') this.tree = this.tree.checkout(opts.version)\n  this.version = this.tree.version\n  this.sparse = !!opts.sparse\n  this.indexing = !!opts.indexing\n\n  this._checkout = opts._checkout\n  this._lock = mutexify()\n\n  var self = this\n\n  this.metadata.on('append', update)\n  this.ready = thunky(open)\n  this.ready(onready)\n\n  function onready (err) {\n    if (err) return self.emit('error', err)\n    self.emit('ready')\n    if (self.content) self.emit('content')\n  }\n\n  function update () {\n    self.version = self.tree.version\n  }\n\n  function open (cb) {\n    self._open(cb)\n  }\n}\n\ninherits(Hyperdrive, events.EventEmitter)\n\nObject.defineProperty(Hyperdrive.prototype, 'writable', {\n  get: function () {\n    return this.metadata.writable\n  }\n})\n\nHyperdrive.prototype.replicate = function (opts) {\n  if (!opts) opts = {}\n\n  opts.expectedFeeds = 2\n\n  var self = this\n  var stream = this.metadata.replicate(opts)\n\n  this._ensureContent(function (err) {\n    if (err) return stream.destroy(err)\n    if (stream.destroyed) return\n    self.content.replicate({live: opts.live, stream: stream})\n  })\n\n  return stream\n}\n\nHyperdrive.prototype.checkout = function (version) {\n  return Hyperdrive(null, null, {\n    _checkout: this._checkout || this,\n    metadata: this.metadata,\n    version: version\n  })\n}\n\nHyperdrive.prototype.history = function (opts) {\n  return this.tree.history(opts)\n}\n\n// TODO: move to ./lib\nHyperdrive.prototype.createReadStream = function (name, opts) {\n  if (!opts) opts = {}\n\n  var self = this\n  var first = true\n  var start = 0\n  var end = 0\n  var offset = 0\n  var length = typeof opts.end === 'number' ? 1 + opts.end - (opts.start || 0) : typeof opts.length === 'number' ? opts.length : -1\n  var range = null\n  var ended = false\n  var stream = from(read)\n\n  stream.on('close', cleanup)\n  stream.on('end', cleanup)\n\n  return stream\n\n  function cleanup () {\n    if (range) self.content.undownload(range)\n    range = null\n    ended = true\n  }\n\n  function read (size, cb) {\n    if (first) return open(size, cb)\n    if (start === end || length === 0) return cb(null, null)\n\n    self.content.get(start++, function (err, data) {\n      if (err) return cb(err)\n      if (offset) data = data.slice(offset)\n      offset = 0\n      if (length > -1) {\n        if (length < data.length) data = data.slice(0, length)\n        length -= data.length\n      }\n      cb(null, data)\n    })\n  }\n\n  function open (size, cb) {\n    first = false\n    self._ensureContent(function (err) {\n      if (err) return cb(err)\n      self.tree.get(name, function (err, stat) {\n        if (err) return cb(err)\n        if (ended) return\n\n        start = stat.offset\n        end = stat.offset + stat.blocks\n\n        var byteOffset = stat.byteOffset\n\n        if (opts.start) self.content.seek(byteOffset + opts.start, {start: start, end: end}, onstart)\n        else onstart(null, start, 0)\n\n        function onend (err, index) {\n          if (err || !range) return\n          self.content.undownload(range)\n          range = self.content.download({start: start, end: index, linear: true})\n        }\n\n        function onstart (err, index, off) {\n          if (err) return cb(err)\n\n          offset = off\n          start = index\n          range = self.content.download({start: start, end: end, linear: true})\n\n          if (length > -1 && length < stat.size) {\n            self.content.seek(byteOffset + length, {start: start, end: end}, onend)\n          }\n\n          read(size, cb)\n        }\n      })\n    })\n  }\n}\n\nHyperdrive.prototype.readFile = function (name, opts, cb) {\n  if (typeof opts === 'function') return this.readFile(name, null, opts)\n  if (typeof opts === 'string') opts = {encoding: opts}\n  if (!opts) opts = {}\n\n  collect(this.createReadStream(name), function (err, bufs) {\n    if (err) return cb(err)\n    var buf = bufs.length === 1 ? bufs[0] : Buffer.concat(bufs)\n    cb(null, opts.encoding && opts.encoding !== 'binary' ? buf.toString(opts.encoding) : buf)\n  })\n}\n\nHyperdrive.prototype.createWriteStream = function (name, opts) {\n  if (!opts) opts = {}\n\n  var self = this\n  var proxy = duplexify()\n\n  // TODO: support piping through a \"split\" stream like rabin\n\n  proxy.setReadable(false)\n  this._ensureContent(function (err) {\n    if (err) return proxy.destroy(err)\n    if (self._checkout) return proxy.destroy(new Error('Cannot write to a checkout'))\n    if (proxy.destroyed) return\n\n    self._lock(function (release) {\n      if (proxy.destroyed) return release()\n\n      // No one should mutate the content other than us\n      var byteOffset = self.content.byteLength\n      var offset = self.content.length\n\n      self.emit('append', name, opts)\n\n      // TODO: revert the content feed if this fails!!!! (add an option to the write stream for this (atomic: true))\n      var stream = self.content.createWriteStream()\n\n      proxy.on('close', done)\n      proxy.on('finish', done)\n\n      proxy.setWritable(stream)\n      proxy.on('prefinish', function () {\n        var st = {\n          mode: (opts.mode || DEFAULT_FMODE) | stat.IFREG,\n          uid: opts.uid || 0,\n          gid: opts.gid || 0,\n          size: self.content.byteLength - byteOffset,\n          blocks: self.content.length - offset,\n          offset: offset,\n          byteOffset: byteOffset,\n          mtime: getTime(opts.mtime),\n          ctime: getTime(opts.ctime)\n        }\n\n        proxy.cork()\n        self.tree.put(name, st, function (err) {\n          if (err) return proxy.destroy(err)\n          proxy.uncork()\n        })\n      })\n\n      function done () {\n        proxy.removeListener('close', done)\n        proxy.removeListener('finish', done)\n        release()\n      }\n    })\n  })\n\n  return proxy\n}\n\nHyperdrive.prototype.writeFile = function (name, buf, opts, cb) {\n  if (typeof opts === 'function') return this.writeFile(name, buf, null, opts)\n  if (typeof opts === 'string') opts = {encoding: opts}\n  if (!opts) opts = {}\n  if (typeof buf === 'string') buf = new Buffer(buf, opts.encoding || 'utf-8')\n  if (!cb) cb = noop\n\n  var bufs = split(buf) // split the input incase it is a big buffer.\n  var stream = this.createWriteStream(name, opts)\n  stream.on('error', cb)\n  stream.on('finish', cb)\n  for (var i = 0; i < bufs.length; i++) stream.write(bufs[i])\n  stream.end()\n}\n\nHyperdrive.prototype.mkdir = function (name, opts, cb) {\n  if (typeof opts === 'function') return this.mkdir(name, null, opts)\n  if (typeof opts === 'number') opts = {mode: opts}\n  if (!opts) opts = {}\n  if (!cb) cb = noop\n\n  var self = this\n\n  this.ready(function (err) {\n    if (err) return cb(err)\n    if (self._checkout) return cb(new Error('Cannot write to a checkout'))\n\n    self._lock(function (release) {\n      var st = {\n        mode: (opts.mode || DEFAULT_DMODE) | stat.IFDIR,\n        uid: opts.uid,\n        gid: opts.gid,\n        mtime: getTime(opts.mtime),\n        ctime: getTime(opts.ctime)\n      }\n\n      self.tree.put(name, st, function (err) {\n        release(cb, err)\n      })\n    })\n  })\n}\n\nHyperdrive.prototype._statDirectory = function (name, cb) {\n  this.tree.list(name, function (err, list) {\n    if (name !== '/' && (err || !list.length)) return cb(err || new Error(name + ' could not be found'))\n    var st = stat()\n    st.mode = stat.IFDIR | DEFAULT_DMODE\n    cb(null, st)\n  })\n}\n\nHyperdrive.prototype.access = function (name, cb) {\n  this.stat(name, function (err) {\n    cb(err)\n  })\n}\n\nHyperdrive.prototype.exists = function (name, cb) {\n  this.access(name, function (err) {\n    cb(!err)\n  })\n}\n\nHyperdrive.prototype.lstat = function (name, cb) {\n  var self = this\n\n  this.tree.get(name, function (err, st) {\n    if (err) return self._statDirectory(name, cb)\n    cb(null, stat(st))\n  })\n}\n\nHyperdrive.prototype.stat = function (name, cb) {\n  this.lstat(name, cb)\n}\n\nHyperdrive.prototype.readdir = function (name, cb) {\n  if (name === '/') return this._readdirRoot(cb) // TODO: should be an option in append-tree prob\n  this.tree.list(name, cb)\n}\n\nHyperdrive.prototype._readdirRoot = function (cb) {\n  this.tree.list('/', function (_, list) {\n    if (list) return cb(null, list)\n    cb(null, [])\n  })\n}\n\nHyperdrive.prototype.unlink = function (name, cb) {\n  this.tree.del(name, cb)\n}\n\nHyperdrive.prototype.rmdir = function (name, cb) {\n  var self = this\n\n  this.readdir(name, function (err, list) {\n    if (err) return cb(err)\n    if (list.length) return cb(new Error('Directory is not empty'))\n    self.tree.del(name, cb)\n  })\n}\n\nHyperdrive.prototype.close = function (cb) {\n  if (!cb) cb = noop\n\n  var self = this\n  this.ready(function (err) {\n    if (err) return cb(err)\n    self.metadata.close(function (err) {\n      if (!self.content) return cb(err)\n      self.content.close(cb)\n    })\n  })\n}\n\nHyperdrive.prototype._ensureContent = function (cb) {\n  var self = this\n\n  this.ready(function (err) {\n    if (err) return cb(err)\n    if (!self.content) return self._loadIndex(cb)\n    cb(null)\n  })\n}\n\nHyperdrive.prototype._loadIndex = function (cb) {\n  var self = this\n\n  if (this._checkout) this._checkout._loadIndex(done)\n  else this.metadata.get(0, {valueEncoding: messages.Index}, done)\n\n  function done (err, index) {\n    if (err) return cb(err)\n    if (self.content) return self.content.ready(cb)\n\n    var keyPair = self.metadata.writable && contentKeyPair(self.metadata.secretKey)\n    var opts = {\n      sparse: self.sparse,\n      maxRequests: self.maxRequests,\n      secretKey: keyPair && keyPair.secretKey,\n      storeSecretKey: false,\n      indexing: self.indexing\n    }\n\n    self.content = self._checkout ? self._checkout.content : hypercore(self._storages.content, index.content, opts)\n    self.content.ready(function (err) {\n      if (err) return cb(err)\n      self.emit('content')\n      cb()\n    })\n  }\n}\n\nHyperdrive.prototype._open = function (cb) {\n  var self = this\n\n  this.tree.ready(function (err) {\n    if (err) return cb(err)\n    self.metadata.ready(function (err) {\n      if (err) return cb(err)\n      self.version = self.tree.version\n      if (self.content) return cb(null)\n\n      self.key = self.metadata.key\n      self.discoveryKey = self.metadata.discoveryKey\n\n      if (!self.metadata.writable || self._checkout) onnotwriteable()\n      else onwritable()\n    })\n  })\n\n  function onnotwriteable () {\n    if (self.metadata.has(0)) return self._loadIndex(cb)\n    self._loadIndex(noop)\n    cb()\n  }\n\n  function onwritable () {\n    var wroteIndex = self.metadata.has(0)\n    if (wroteIndex) {\n      if (self.version === -1) self.version = 0 // TODO: perhaps fix in append-tree?\n      return self._loadIndex(cb)\n    }\n\n    if (!self.content) {\n      var keyPair = contentKeyPair(self.metadata.secretKey)\n      self.content = hypercore(self._storages.content, keyPair.publicKey, {sparse: self.sparse, secretKey: keyPair.secretKey, storeSecretKey: false, indexing: self.indexing})\n    }\n\n    self.content.ready(function () {\n      if (self.metadata.has(0)) return cb(new Error('Index already written'))\n      self.metadata.append(messages.Index.encode({type: 'hyperdrive', content: self.content.key}), function (err) {\n        if (err) return cb(err)\n        if (self.version === -1) self.version = 0 // TODO: perhaps fix in append-tree?\n        cb()\n      })\n    })\n  }\n}\n\nfunction isObject (val) {\n  return !!val && typeof val !== 'string' && !Buffer.isBuffer(val)\n}\n\nfunction wrap (self, storage) {\n  return {\n    metadata: function (name) {\n      return storage.metadata(name, self)\n    },\n    content: function (name) {\n      return storage.content(name, self)\n    }\n  }\n}\n\nfunction defaultStorage (self, storage, opts) {\n  var folder = ''\n\n  if (typeof storage === 'object' && storage) return wrap(self, storage)\n\n  if (typeof storage === 'string') {\n    folder = storage + '/'\n    storage = raf\n  }\n\n  return {\n    metadata: function (name) {\n      return storage(folder + 'metadata/' + name)\n    },\n    content: function (name) {\n      return storage(folder + 'content/' + name)\n    }\n  }\n}\n\nfunction noop () {}\n\nfunction split (buf) {\n  var list = []\n  for (var i = 0; i < buf.length; i += 65536) {\n    list.push(buf.slice(i, i + 65536))\n  }\n  return list\n}\n\nfunction getTime (date) {\n  if (typeof date === 'number') return date\n  if (!date) return Date.now()\n  return date.getTime()\n}\n\nfunction contentKeyPair (secretKey) {\n  var seed = new Buffer(sodium.crypto_sign_SEEDBYTES)\n  var context = new Buffer('hyperdri') // 8 byte context\n  var keyPair = {\n    publicKey: new Buffer(sodium.crypto_sign_PUBLICKEYBYTES),\n    secretKey: new Buffer(sodium.crypto_sign_SECRETKEYBYTES)\n  }\n\n  sodium.crypto_kdf_derive_from_key(seed, 1, context, secretKey)\n  sodium.crypto_sign_seed_keypair(keyPair.publicKey, keyPair.secretKey, seed)\n  if (seed.fill) seed.fill(0)\n\n  return keyPair\n}\n","/home/travis/build/npmtest/node-npmtest-hyperdrive/node_modules/hyperdrive/lib/messages.js":"var protobuf = require('protocol-buffers')\n\nmodule.exports = protobuf(`\n  message Index {\n    required string type = 1;\n    optional bytes content = 2;\n  }\n\n  message Stat {\n    required uint32 mode = 1;\n    optional uint32 uid = 2;\n    optional uint32 gid = 3;\n    optional uint64 size = 4;\n    optional uint64 blocks = 5;\n    optional uint64 offset = 6;\n    optional uint64 byteOffset = 7;\n    optional uint64 mtime = 8;\n    optional uint64 ctime = 9;\n  }\n`)\n","/home/travis/build/npmtest/node-npmtest-hyperdrive/node_modules/hyperdrive/lib/stat.js":"// http://man7.org/linux/man-pages/man2/stat.2.html\n\nmodule.exports = Stat\n\nfunction Stat (data) {\n  if (!(this instanceof Stat)) return new Stat(data)\n\n  this.dev = 0\n  this.nlink = 1\n  this.rdev = 0\n  this.blksize = 0\n  this.ino = 0\n\n  this.mode = data ? data.mode : 0\n  this.uid = data ? data.uid : 0\n  this.gid = data ? data.gid : 0\n  this.size = data ? data.size : 0\n  this.offset = data ? data.offset : 0\n  this.blocks = data ? data.blocks : 0\n  this.atime = new Date(data ? data.mtime : 0) // we just set this to mtime ...\n  this.mtime = new Date(data ? data.mtime : 0)\n  this.ctime = new Date(data ? data.ctime : 0)\n\n  this.linkname = data ? data.linkname : null\n}\n\nStat.IFSOCK = 49152 // 0b1100...\nStat.IFLNK = 40960 // 0b1010...\nStat.IFREG = 32768 // 0b1000...\nStat.IFBLK = 24576 // 0b0110...\nStat.IFDIR = 16384 // 0b0100...\nStat.IFCHR = 8192 // 0b0010...\nStat.IFIFO = 4096 // 0b0001...\n\nStat.prototype.isSocket = check(Stat.IFSOCK)\nStat.prototype.isSymbolicLink = check(Stat.IFLNK)\nStat.prototype.isFile = check(Stat.IFREG)\nStat.prototype.isBlockDevice = check(Stat.IFBLK)\nStat.prototype.isDirectory = check(Stat.IFDIR)\nStat.prototype.isCharacterDevice = check(Stat.IFCHR)\nStat.prototype.isFIFO = check(Stat.IFIFO)\n\nfunction check (mask) {\n  return function () {\n    return (mask & this.mode) === mask\n  }\n}\n"}